#+title: Emacs things on publishing
#+INCLUDE: "~/Programming/Projects/my-org-site/content/header.org"
* Welcome

 next page: [[file:Eamcs.org][Click]]
* 
#+begin_src sh
#+DESCRIPTION: Header
#+SETUPFILE: ./org-html-themes/org/theme-readtheorg.setup
#+OPTIONS: num:nil ^:{}

#+begin_export html
<div class="orgyeah-header">
  <img src="https://distro.tube/img/logo.png"/>
  <div class="topbar-menu-container">
    <span class="topbar-menu"><a class="current" href="https://distro.tube/index.html">Home</a></span>
    <span class="topbar-menu"><a href="https://distro.tube/dtos/index.html">DTOS</a></span>
    <span class="topbar-menu"><a href="https://distro.tube/projects/index.html">Other Projects</a></span>
    <span class="topbar-menu"><a href="https://distro.tube/kb/index.html">Knowledge Base</a></span>
    <span class="topbar-menu"><a href="https://distro.tube/man-org/index.html">Linux Manpages</a></span>
    <span class="topbar-menu"><a href="https://distro.tube/community/index.html">Community</a></span>
    <span class="topbar-menu"><a href="https://distro.tube/contribute/index.html">Contribute</a></span>
  </div>
</div>
#+end_export
#+end_src


#+begin_src emacs-lisp
;; Set the package installation directory so that packages aren't stored in the
;; ~/.emacs.d/elpa path.
(require 'package)
(setq package-user-dir (expand-file-name "./.packages"))
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

;; Initialize the package system
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Install dependencies
(package-install 'htmlize)
;; Load the publishing system
(require 'ox-publish)
;; Customize the HTML output
(setq org-html-validation-link nil            ;; Don't show validation link
      org-html-head-include-scripts nil       ;; Use our own scripts
      org-html-head-include-default-style nil ;; Use our own styles
      org-html-head "<link rel=\"stylesheet\" href=\"https://cdn.simplecss.org/simple.min.css\" />")

(setq org-html-validation-link nil) 
;; Define the publishing project
(setq org-publish-project-alist
      (list
       (list "org-site:main"
             :recursive t
             :base-directory "./content"
             :publishing-function 'org-html-publish-to-html
             :publishing-directory "./public"
             :with-author nil           ;; Don't include author name
             :with-creator t            ;; Include Emacs and Org versions in footer
             :with-toc t                ;; Include a table of CONTENTS
             :section-numbers nil       ;; Don't include section numbers
             :time-stamp-file nil)))    ;; Don't include time stamp in file
;; Generate the site output
(org-publish-all t)

;;delte the validation
(setq org-html-validation-link nil) 
(message "Build complete!")


#+end_src

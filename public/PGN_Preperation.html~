<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Processing PGNs, Get spoken notations</title>
<meta name="description" content="Header" />
<meta name="generator" content="Org Mode" />
<link rel="stylesheet" type="text/css" href="https://distro.tube/org-html-themes/src/readtheorg_theme/css/htmlize.css">
<link rel="stylesheet" type="text/css" href="https://distro.tube/org-html-themes/src/readtheorg_theme/css/readtheorg.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
<script type="text/javascript" src="https://distro.tube/org-html-themes/src/lib/js/jquery.stickytableheaders.min.js"></script>
<script type="text/javascript" src="https://distro.tube/org-html-themes/src/readtheorg_theme/js/readtheorg.js"></script>
<style>pre.src{background:#101416;color:#a29fa6;font-size:15px;} </style>
<style>pre.src.src-python span{background:#101416;color:#a865cc;} </style>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
        displayAlign: "center",
        displayIndent: "0em",

        "HTML-CSS": { scale: 100,
                        linebreaks: { automatic: "false" },
                        webFont: "TeX"
                       },
        SVG: {scale: 100,
              linebreaks: { automatic: "false" },
              font: "TeX"},
        NativeMML: {scale: 100},
        TeX: { equationNumbers: {autoNumber: "AMS"},
               MultLineWidth: "85%",
               TagSide: "right",
               TagIndent: ".8em"
             }
});
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML"></script>
</head>
<body>
<div id="content" class="content">
<h1 class="title">Processing PGNs, Get spoken notations</h1>
<div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgbe14926">Intro</a></li>
<li><a href="#orgdd65021">PGN ?</a></li>
<li><a href="#orgb5ca450">The whole Thing in a bash-script</a>
<ul>
<li><a href="#org73c3db8">The AWK script</a>
<ul>
<li><a href="#org3682f95">Usage:</a></li>
</ul>
</li>
<li><a href="#org3fc5d57">the Python parser</a>
<ul>
<li><a href="#orgbdd8384">Usage</a></li>
</ul>
</li>
<li><a href="#org14d1a39">The final bash-script</a></li>
</ul>
</li>
</ul>
</div>
</div>
<div class="orgyeah-header">
  <img src="logo.pgn"/>
  <div class="topbar-menu-container">
    <span class="topbar-menu"><a class="current" href="index.html">Welcome</a></span>
    <span class="topbar-menu"><a href="contact_me.html">Contact Me</a></span>
  </div>
</div>
<div id="outline-container-orgbe14926" class="outline-2">
<h2 id="orgbe14926">Intro</h2>
<div class="outline-text-2" id="text-orgbe14926">
<ul class="org-ul">
<li>Some time ago, while I was working on my Chess-ASR project using Kaldi, I needed acoustic data of spoken chess moves. My idea was to extract these audio segments from YouTube videos that analyze chess games. Of course, I didn't want to do it manually by listening, waiting for the YouTuber to pronounce a move, extracting that segment, and labeling it with its corresponding FEN notation. That would be out of character for my lazy personality (Actually, you need thousands of segments). So, I thought about linking videos to their corresponding PGN files and building something that automatically extracts the audio segment of each move.</li>

<li>In this part of the blog series, I will demonstrate how I processed the PGN files using awk, Python, and Bash scripts.</li>
</ul>
</div>
</div>


<div id="outline-container-orgdd65021" class="outline-2">
<h2 id="orgdd65021">PGN ?</h2>
<div class="outline-text-2" id="text-orgdd65021">
<ul class="org-ul">
<li>PGN stands for Portable Game Notation which is a standard created for representing chess games data using ASCII text files.</li>
<li>Our PGNs were downloaded from the awesome <a href="http://www.pgnmentor.com/">pgnmentor</a> website.</li>
<li>Each file contains multiple games. Example of a game representation:</li>
</ul>
<div class="org-src-container">
<pre class="src src-Text">[Event "Pan-Am Intercollegiate"]
[Site "chess.com INT"]
[Date "2021.01.04"]
[Round "2"]
[White "Polgar-Shutzman,Leeam"]
[Black "Eichner,Kobi"]
[Result "1-0"]
[WhiteElo ""]
[BlackElo ""]
[ECO "C46"]

1.e4 e5 2.Nf3 Nc6 3.Nc3 d6 4.d4 exd4 5.Nxd4 Nxd4 6.Qxd4 c5 7.Qd1 Nf6 8.Bg5 Be7
9.Bc4 O-O 10.O-O h6 11.Bh4 a6 12.a4 Bg4 13.f3 Bd7 14.a5 Bc6 15.Qd3 b6 16.axb6 Qxb6
17.Kh1 a5 18.b3 Nxe4 19.Bxe7 Rfe8 20.fxe4 Rxe7 21.Qxd6 Rd7 22.Qf4 Rf8 23.Rad1 Re7
24.Nd5 Bxd5 25.Rxd5 Kh8 26.Rd6 Qc7 27.Rf3 g5 28.Rxh6+ Kg7 29.Qxg5+  1-0
</pre>
</div>
<ul class="org-ul">
<li>PGN text begins with a set of "tag pairs," which are lines enclosed between two brackets. In my project, it was used in SQL database preparation, but that is a story for another blog post. Today, we will focus on the <code>Movetext</code> part. You can read about its description <a href="https://en.wikipedia.org/wiki/Portable_Game_Notation#Movetext">here</a>. We want to convert the moves into their spoken version. For example:
<ul class="org-ul">
<li>`Bxe7` =&gt; `Bishop takes on e seven`</li>
<li>`Nf3`  =&gt; `Knight f three`</li>
</ul></li>
<li>For this task, I used Bash scripting, AWK, and Python. The work can be done using any of the three mentioned programming languages, and it is probably recommended to use only one language. However, I wanted to sharpen my knowledge of these three languages by using them whenever there is an opportunity, and no harm can be done.</li>
</ul>
</div>
</div>

<div id="outline-container-orgb5ca450" class="outline-2">
<h2 id="orgb5ca450">The whole Thing in a bash-script</h2>
<div class="outline-text-2" id="text-orgb5ca450">
<ul class="org-ul">
<li><p>
The algorithms in our script is:
</p>
<div class="org-src-container">
<pre class="src src-shell"><span style="font-weight: bold;">for</span> every file.pgn:
    AWK: extract the notations to a file.not  

<span style="font-weight: bold;">for</span> every file.not:
    Python: Convert the notation to its spoken version to file.spoken
</pre>
</div></li>
<li>Of course, I am aware that we can reduce the complexity by half and get our .spoken files using a single loop, but we will need separate .not and .spoken files when I show you the database work in another blog post.</li>
</ul>
</div>

<div id="outline-container-org73c3db8" class="outline-3">
<h3 id="org73c3db8">The AWK script</h3>
<div class="outline-text-3" id="text-org73c3db8">
<ul class="org-ul">
<li>AWK script file: <code>Cleaning.awk</code>:</li>
</ul>
<div class="org-src-container">
<pre class="src src-awk"><span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">Ignore empty lines and lines starting with `[`</span>
($0 !~ <span style="font-style: italic;">/\[/</span>) &amp;&amp; (<span style="font-weight: bold; font-style: italic;">NF</span> &gt; 0) {
    <span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">Loop through each field of the line</span>
    <span style="font-weight: bold;">for</span> (i = 1; i &lt;= <span style="font-weight: bold; font-style: italic;">NF</span>; i++) {
        <span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">Split the field by period character</span>
        nFields = <span style="font-weight: bold;">split</span>($i, fields, <span style="font-style: italic;">"."</span>)

        <span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">Ignore the score by checking if the last field contains a hyphen</span>
        <span style="font-weight: bold;">if</span> (<span style="font-weight: bold;">index</span>(fields[nFields], <span style="font-style: italic;">"-"</span>) == 0) {
            <span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">Print the last field</span>
            <span style="font-weight: bold;">print</span> fields[nFields]
        }
    }
}
</pre>
</div>
</div>
<div id="outline-container-org3682f95" class="outline-4">
<h4 id="org3682f95">Usage:</h4>
<div class="outline-text-4" id="text-org3682f95">
<div class="org-src-container">
<pre class="src src-shell">awk -v <span style="font-weight: bold; font-style: italic;">RS</span>=<span style="font-style: italic;">'\r\n'</span> -f Cleaning.awk file.pgn &gt; file.not
</pre>
</div>
<ul class="org-ul">
<li>The RS='\r\n' is to solve what we call a record separator problem, where we have to specify it for our own OS (Unix-based). Check <a href="https://stackoverflow.com/questions/13069905/awk-print-is-adding-a-control-m-character-at-end-of-line">here</a>.</li>
</ul>
</div>
</div>
</div>

<div id="outline-container-org3fc5d57" class="outline-3">
<h3 id="org3fc5d57">the Python parser</h3>
<div class="outline-text-3" id="text-org3fc5d57">
<ul class="org-ul">
<li>Python script: <code>Parser.py</code></li>
</ul>
<div class="org-src-container">
<pre class="src src-python"><span style="font-weight: bold;">import</span> sys

<span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">Check if the correct number of arguments is provided</span>
<span style="font-weight: bold;">if</span> <span style="font-weight: bold;">len</span>(sys.argv) != 3:
    <span style="font-weight: bold;">print</span>(<span style="font-style: italic;">"Usage: Parser.py `file.not` `output.Spoken`"</span>)
    sys.<span style="font-weight: bold; text-decoration: underline;">exit</span>(1)

<span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">Get the input and output file names from the command line arguments</span>
file_not = sys.argv[1] <span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">AWK output file</span>
<span style="font-weight: bold; font-style: italic;">output_spoken</span> = sys.argv[2]

<span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">Define dictionaries for mapping pieces and numbers to spoken words</span>
<span style="font-weight: bold; font-style: italic;">Piece</span> = {<span style="font-style: italic;">'K'</span>: <span style="font-style: italic;">'king'</span>, <span style="font-style: italic;">'Q'</span>: <span style="font-style: italic;">'queen'</span>, <span style="font-style: italic;">'N'</span>: <span style="font-style: italic;">'knight'</span>, <span style="font-style: italic;">'R'</span>: <span style="font-style: italic;">'rook'</span>, <span style="font-style: italic;">'B'</span>: <span style="font-style: italic;">'bishop'</span>}
<span style="font-weight: bold; font-style: italic;">Number</span> = {<span style="font-style: italic;">'1'</span>: <span style="font-style: italic;">'one'</span>, <span style="font-style: italic;">'2'</span>: <span style="font-style: italic;">'two'</span>, <span style="font-style: italic;">'3'</span>: <span style="font-style: italic;">'three'</span>, <span style="font-style: italic;">'4'</span>: <span style="font-style: italic;">'four'</span>, <span style="font-style: italic;">'5'</span>: <span style="font-style: italic;">'five'</span>, <span style="font-style: italic;">'6'</span>: <span style="font-style: italic;">'six'</span>, <span style="font-style: italic;">'7'</span>: <span style="font-style: italic;">'seven'</span>, <span style="font-style: italic;">'8'</span>: <span style="font-style: italic;">'eight'</span>}

<span style="font-weight: bold;">def</span> <span style="font-weight: bold;">parse_move</span>(move):
    <span style="font-style: italic;">"""</span>
<span style="font-style: italic;">    Function that takes a move and transcribes it to spoken text.</span>
<span style="font-style: italic;">    Args:</span>
<span style="font-style: italic;">        move (str): string representing the PGN move</span>
<span style="font-style: italic;">    Returns:</span>
<span style="font-style: italic;">        Parsed (str): spoken text format for the PGN move</span>
<span style="font-style: italic;">    """</span>
    Parsed = <span style="font-style: italic;">""</span>
    <span style="font-weight: bold;">for</span> char <span style="font-weight: bold;">in</span> move:
        <span style="font-weight: bold;">if</span> char == <span style="font-style: italic;">'O'</span>:
            <span style="font-weight: bold;">if</span> <span style="font-weight: bold;">len</span>(move) == 3:
                Parsed += <span style="font-style: italic;">"short castling"</span>
            <span style="font-weight: bold;">else</span>:
                Parsed += <span style="font-style: italic;">"long castling"</span>
            <span style="font-weight: bold;">break</span>
        <span style="font-weight: bold;">elif</span> char == <span style="font-style: italic;">'x'</span>:
            Parsed += <span style="font-style: italic;">'takes on '</span>
        <span style="font-weight: bold;">elif</span> char == <span style="font-style: italic;">'+'</span>:
            Parsed += <span style="font-style: italic;">'check'</span>
        <span style="font-weight: bold;">elif</span> char.isupper():
            Parsed += Piece[char] + <span style="font-style: italic;">" "</span>
        <span style="font-weight: bold;">elif</span> char.islower():
            Parsed += char + <span style="font-style: italic;">" "</span>
        <span style="font-weight: bold;">elif</span> char.isdigit():
            Parsed += Number[char]+ <span style="font-style: italic;">" "</span>
        <span style="font-weight: bold;">elif</span> char == <span style="font-style: italic;">'#'</span>:
            Parsed += <span style="font-style: italic;">"Checkmate"</span>
    Parsed += <span style="font-style: italic;">"\n"</span>
    <span style="font-weight: bold;">return</span> <span style="font-style: italic;">" "</span>.join(Parsed.split()) + <span style="font-style: italic;">"\n"</span>

<span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">Open the output file for writing</span>
<span style="font-weight: bold;">with</span> <span style="font-weight: bold;">open</span>(output_spoken, <span style="font-style: italic;">"w"</span>) <span style="font-weight: bold;">as</span> spf:
    <span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">Open the input file for reading</span>
    <span style="font-weight: bold;">with</span> <span style="font-weight: bold;">open</span>(file_not, <span style="font-style: italic;">"r"</span>) <span style="font-weight: bold;">as</span> af:
        <span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">Loop through each line of the input file</span>
        <span style="font-weight: bold;">for</span> line <span style="font-weight: bold;">in</span> af:
            <span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">Write the parsed move to the output file</span>
            spf.write(parse_move(line))
</pre>
</div>
</div>

<div id="outline-container-orgbdd8384" class="outline-4">
<h4 id="orgbdd8384">Usage</h4>
<div class="outline-text-4" id="text-orgbdd8384">
<div class="org-src-container">
<pre class="src src-shell">python Parser.py file.not file.spoken
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org14d1a39" class="outline-3">
<h3 id="org14d1a39">The final bash-script</h3>
<div class="outline-text-3" id="text-org14d1a39">
<ul class="org-ul">
<li>Suppose our pgn files are located in the <span class="underline">DATA</span> directory</li>
</ul>
<div class="org-src-container">
<pre class="src src-shell"><span style="font-weight: bold;">for</span> file<span style="font-weight: bold;"> in</span> $(<span style="font-weight: bold;">ls DATA | grep pgn</span>)
<span style="font-weight: bold;">do</span>
    <span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">get filename (without extension)</span>
    <span style="font-weight: bold; font-style: italic;">f</span>=$(<span style="font-weight: bold;">awk -F. '{print $1}'&lt;&lt;&lt; "DATA/"$file</span>)

    awk -v <span style="font-weight: bold; font-style: italic;">RS</span>=<span style="font-style: italic;">'\r\n'</span> -f Cleaning.awk $<span style="font-weight: bold; font-style: italic;">f</span><span style="font-style: italic;">".pgn"</span> &gt;$<span style="font-weight: bold; font-style: italic;">f</span><span style="font-style: italic;">".not"</span>
<span style="font-weight: bold;">done</span>

<span style="font-weight: bold;">for</span> file<span style="font-weight: bold;"> in</span> $(<span style="font-weight: bold;">ls DATA | grep pgn</span>)
<span style="font-weight: bold;">do</span>
    <span style="font-weight: bold;">echo</span> $<span style="font-weight: bold; font-style: italic;">f</span>
    <span style="font-weight: bold; font-style: italic;">f</span>=$(<span style="font-weight: bold;">awk -F. '{print $1}'&lt;&lt;&lt; "DATA_zip/"$file</span>)
    python Parser.py $<span style="font-weight: bold; font-style: italic;">f</span><span style="font-style: italic;">".not"</span> $<span style="font-weight: bold; font-style: italic;">f</span><span style="font-style: italic;">".spoken"</span>
<span style="font-weight: bold;">done</span>  
</pre>
</div>
</div>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="creator"><a href="https://www.gnu.org/software/emacs/">Emacs</a> 28.2 (<a href="https://orgmode.org">Org</a> mode 9.5.5)</p>
</div>
</body>
</html>
